# Flow4AI - scalable AI job scheduling and execution platform

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.

## Project Context
Flow4AI allows users to execute AI and IO Job graphs in parallel.

## Working process


## Architecture
Always read the [architecture document](ARCHITECTURE.md) before undertaking any task. You are allowed to update this document with any observations you have made. If you do update the ARCHITECTURE.md, then put *** ARCHITECTURE UPDATE *** in the output.

## Tests
- execute unit tests in the root directory using pytest using the command `python -m pytest` as the root of your test commands.
- use pytest's --full-suite flag to run all tests, including performance tests.
- when running tests that are logging in order to investigate causes the use `python -m pytest -s` to see the logs. Just using "-v" will not show the logs.

## JobABC Implementation Rules
- NEVER override the `_execute` method in custom job classes. This method is responsible for job graph execution and state management.
- Always implement the required `run` method in custom job classes to define job-specific behavior.
- The `run` method should accept a task parameter and return a dictionary with results.
- Use properties to access configuration parameters rather than directly accessing them in the run method.

## Debugging FlowManagerMP Timeout Errors
When encountering "Timed out waiting for jobs to be loaded" errors in FlowManagerMP:
- Check the stderr output from the JobExecutorProcess for underlying errors
JobABC subclasses:
- Always implement all required abstract methods from JobABC in custom job classes

## Logging
For logging, use the flow4ai.f4a_logging module, not the standard logging module.
- for external files, examples and tests use
`import flow4ai.f4a_logging as logging` 
then do 
`logger = logging.getLogger(__name__)`
- for internal files under /src use the relative path import of f4a_logging
- to activate debug logging in tests do `FLOW4AI_LOG_LEVEL=DEBUG python -m pytest -v -s`
